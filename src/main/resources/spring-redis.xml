<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--&lt;!&ndash;其实component-scan 就有了annotation-config的功能即把需要的类注册到了spring容器中 &ndash;&gt;-->
	<!--<context:component-scan base-package="com.cqut.li.test_ssm.service" />-->
	<!--配置事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- redis配置 -->
	<!-- redis连接池 -->
	<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="300"></property>
		<property name="maxIdle" value="200"></property>
		<property name="MaxWaitMillis" value="10000"></property>
		<property name="testOnBorrow" value="true"></property>
		<property name="testOnReturn" value="true"></property>
	</bean>
	<!-- redis连接工厂 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="127.0.0.1"></property>
		<property name="port" value="6379"></property>
		<property name="password" value="root"></property>
		<property name="poolConfig" ref="jedisConfig"></property>
	</bean>

	<!-- redis操作模板，这里采用尽量面向对象的模板 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
<!--		<property name="connectionFactory" ref="connectionFactory" />-->

<!--		<property name="keySerializer">-->
<!--			<bean-->
<!--				class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--		</property>-->
<!--		<property name="valueSerializer">-->
<!--			<bean-->
<!--				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
<!--		</property>-->

<!--		<property name="hashKeySerializer">-->
<!--			<bean-->
<!--				class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--		</property>-->
<!--		<property name="hashValueSerializer">-->
<!--			<bean-->
<!--				class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--		</property>-->
		<property name="connectionFactory" ref="connectionFactory" />

		<property name="keySerializer">
			<bean
					class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
					class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>

		<property name="hashKeySerializer">
			<bean
					class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
					class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>


</beans>
